void GetMap(string fn)
{
   int w;
   int buffer;
   int numtextures;
   int numobjects;
   int row = 0;
   string dummy;
   string dataname = fn + ".map";
   string heightmapname = fn + ".png";
   ifstream gm(dataname.c_str(), ios_base::in);
   gm >> dummy;
   gm >> w;
   gm >> dummy;
   gm >> tilesize;
   coldet.tilesize = tilesize;
   gm >> dummy;
   gm >> heightscale;
   gm >> dummy;
   gm >> nummaplayers;
   gm >> dummy;
   gm >> numtextures;
   gm >> dummy;
   gm >> numobjects;
   
   gm >> buffer;
   int maxworldheight = 0;
   int minworldheight = 0;
   while (buffer != 9999)
   {
      for (int i = 0; i < w; i++)
      {
         if (buffer > maxworldheight)
            maxworldheight = buffer;
         if (buffer < minworldheight)
            minworldheight = buffer;
         maparray[row][i] = buffer;
         gm >> buffer;
      }
      row++;
   }
   mapw = w;
   maph = row;
   maxworldheight *= 2;
   // Top
   worldbounds[0].v[0] = Vector3(0, heightscale * maxworldheight, 0);
   worldbounds[0].v[1] = Vector3((mapw - 1) * tilesize, heightscale * maxworldheight, 0);
   worldbounds[0].v[2] = Vector3(0, heightscale * maxworldheight, (maph - 1) * tilesize);
   worldbounds[0].v[3] = Vector3((mapw - 1) * tilesize, heightscale * maxworldheight, (maph - 1) * tilesize);
   // Sides
   worldbounds[1].v[0] = Vector3(0, heightscale * maxworldheight, 0);
   worldbounds[1].v[1] = Vector3(0, heightscale * maxworldheight, (maph - 1) * tilesize);
   worldbounds[1].v[2] = Vector3(0, heightscale * minworldheight, 0);
   worldbounds[1].v[3] = Vector3(0, heightscale * minworldheight, (maph - 1) * tilesize);
   
   worldbounds[2].v[0] = Vector3(0, heightscale * maxworldheight, (maph - 1)* tilesize);
   worldbounds[2].v[1] = Vector3((mapw - 1) * tilesize, heightscale * maxworldheight, (maph - 1) * tilesize);
   worldbounds[2].v[2] = Vector3(0, heightscale * minworldheight, (maph - 1) * tilesize);
   worldbounds[2].v[3] = Vector3((mapw - 1) * tilesize, heightscale * minworldheight, (maph - 1) * tilesize);
   
   worldbounds[3].v[0] = Vector3((mapw - 1) * tilesize, heightscale * maxworldheight, (maph - 1) * tilesize);
   worldbounds[3].v[1] = Vector3((mapw - 1) * tilesize, heightscale * maxworldheight, 0);
   worldbounds[3].v[2] = Vector3((mapw - 1) * tilesize, heightscale * minworldheight, (maph - 1) * tilesize);
   worldbounds[3].v[3] = Vector3((mapw - 1) * tilesize, heightscale * minworldheight, 0);
   
   worldbounds[4].v[0] = Vector3((mapw - 1) * tilesize, heightscale * maxworldheight, 0);
   worldbounds[4].v[1] = Vector3(0, heightscale * maxworldheight, 0);
   worldbounds[4].v[2] = Vector3((mapw - 1) * tilesize, heightscale * minworldheight, 0);
   worldbounds[4].v[3] = Vector3(0, heightscale * minworldheight, 0);
   // Bottom
   worldbounds[5].v[0] = Vector3(0, heightscale * minworldheight, 0);
   worldbounds[5].v[1] = Vector3(0, heightscale * minworldheight, (maph - 1) * tilesize);
   worldbounds[5].v[2] = Vector3((mapw - 1) * tilesize, heightscale * minworldheight, 0);
   worldbounds[5].v[3] = Vector3((mapw - 1) * tilesize, heightscale * minworldheight, (maph - 1) * tilesize);
   
   for (int i = 0; i < 6; ++i)
   {
      for (int j = 0; j < 4; ++j)
         coldet.worldbounds[i].v[j] = worldbounds[i].v[j];
   }
   
   // Load texture data
   // Each map can have up to maxtexlayers layers
   gm >> buffer;
   for (int layer = 0; layer < nummaplayers; layer++)
   {
      for (row = 0; row < maph - 1; row++)
      {
         // Map defines vertices, texture map defines textures so
         // there's one less in each direction
         for (int i = 0; i < w - 1; i++)
         {
            texarray[layer][row][i] = buffer;
            gm >> buffer;
         }
      }
   }
   
   // Load the textures themselves
   // Note: first texture must always be the skybox
   glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);
   cout << "Loading textures(" << numtextures << ")";
   int currtex;
   string texpath;
   bool alpha;
   //SDL_Surface *loadtex;
   
   glGenTextures(numtextures + 1, textures);
   gm >> currtex;
   gm >> texpath;
   for (int i = 1; i <= numtextures; i++)
   {
      texhand.LoadTexture(texpath, textures[currtex], true, &alpha);
      textrans[currtex] = false;
      if (alpha)
         textrans[currtex] = true;
      cout << ".";
      
      gm >> currtex;
      gm >> texpath;
   }
   cout << endl;
   
   WorldObjects tempobj;
   WorldPrimitives tempprim;
   list<WorldObjects>::iterator currobj;
   for (int i = 0; i < numobjects; i++)
   {
      tempobj = WorldObjects();
      objects.push_front(tempobj);
      currobj = objects.begin();
      gm >> currobj->type;
      if (currobj->type == "cylinder")
      {
         gm >> currobj->texnum;
         gm >> tempprim.rad;
         gm >> tempprim.rad1;
         gm >> tempprim.height;
         gm >> tempprim.slices;
         gm >> tempprim.stacks;
         gm >> currobj->x;
         gm >> currobj->y;
         gm >> currobj->z;
         gm >> currobj->rotation;
         gm >> currobj->pitch;
         gm >> currobj->roll;
         currobj->size = Max(tempprim.height, Max(tempprim.rad, tempprim.rad1));
         tempprim.type = "cylinder";
         tempprim.object = currobj;
         tempprim.texnum = currobj->texnum;
         currobj->prims.push_back(tempprim);
         tempprim = WorldPrimitives();
         
         // For collision detection
         tempprim.object = currobj;
         tempprim.type = "tristrip";
         tempprim.texnum = currobj->texnum;
         tempprim.v[0].x = tempprim.v[1].x = tempprim.v[2].x = tempprim.v[3].x = 0;
         tempprim.v[0].z = tempprim.v[1].z = currobj->prims.front().height;
         tempprim.v[0].y = tempprim.v[1].y = tempprim.v[2].y = tempprim.v[3].y = 0;
         tempprim.v[2].z = tempprim.v[3].z = 0;
         tempprim.v[0].x -= .01;
         tempprim.v[2].x -= .01;
         tempprim.rad = currobj->prims.front().rad;
         tempprim.rad1 = currobj->prims.front().rad1;
         for (int vec = 0; vec < 4; ++vec)
         {
            tempprim.v[vec].rotate(currobj->pitch, currobj->rotation, currobj->roll);
            tempprim.v[vec].translate(currobj->x, currobj->y, currobj->z);
         }
         currobj->prims.push_back(tempprim);
         tempprim = WorldPrimitives();
      }
      else if (currobj->type == "tree")
      {
         int numleaves;  // Don't need to store this value
         gm >> currobj->texnum;
         gm >> currobj->texnum1;
         gm >> currobj->texnum2;
         gm >> tempprim.rad;
         gm >> tempprim.rad1;
         gm >> tempprim.height;
         gm >> tempprim.slices;
         gm >> tempprim.stacks;
         gm >> currobj->x;
         gm >> currobj->y;
         gm >> currobj->z;
         gm >> currobj->rotation;
         gm >> currobj->pitch;
         gm >> currobj->roll;
         gm >> numleaves;
         tempprim.type = "cylinder";
         tempprim.object = currobj;
         tempprim.texnum = currobj->texnum;
         currobj->pitch -= 90; // Make our trees stand up by default
         currobj->size = tempprim.height * 1.5;
         currobj->prims.push_back(tempprim);
         tempprim = WorldPrimitives();
         
         // For collision detection
         tempprim.object = currobj;
         tempprim.type = "tristrip";
         tempprim.texnum = currobj->texnum;
         tempprim.v[0].x = tempprim.v[1].x = tempprim.v[2].x = tempprim.v[3].x = 0;
         tempprim.v[0].z = tempprim.v[1].z = currobj->prims.front().height;
         tempprim.v[0].y = tempprim.v[1].y = tempprim.v[2].y = tempprim.v[3].y = 0;
         tempprim.v[2].z = tempprim.v[3].z = 0;
         tempprim.v[0].x -= .01;
         tempprim.v[2].x -= .01;
         tempprim.rad = currobj->prims.front().rad;
         tempprim.rad1 = currobj->prims.front().rad1;
         for (int vec = 0; vec < 4; ++vec)
         {
            tempprim.v[vec].rotate(currobj->pitch, currobj->rotation, currobj->roll);
            tempprim.v[vec].translate(currobj->x, currobj->y, currobj->z);
         }
         currobj->prims.push_back(tempprim);
         tempprim = WorldPrimitives();
         
         // Generate leaves
         float height = currobj->prims.front().height;
         for (int j = 0; j < numleaves; j++)
         {
            tempprim.texnum = currobj->texnum2;
            tempprim.object = currobj;
            tempprim.type = "tristrip";
            tempprim.transparent = false;
            tempprim.collide = false;
            float leafratio = 1.5;
            tempprim.v[0].x = height / leafratio;
            tempprim.v[0].y = 0;
            tempprim.v[0].z = height / leafratio;
            tempprim.v[1].x = height / leafratio;
            tempprim.v[1].y = 0;
            tempprim.v[1].z = -height / leafratio;
            tempprim.v[2].x = -height / leafratio;
            tempprim.v[2].y = 0;
            tempprim.v[2].z = height / leafratio;
            tempprim.v[3].x = -height / leafratio;
            tempprim.v[3].y = 0;
            tempprim.v[3].z = -height / leafratio;
            float amount = j * 360 / numleaves;
            for (int v = 0; v < 4; v++)
            {
               tempprim.v[v].rotate(amount * 2.5, amount * 3.3, amount);
               tempprim.v[v].translate(0, 0, height / 3 * 2);
               tempprim.v[v].rotate(currobj->pitch, currobj->rotation, currobj->roll);
               tempprim.v[v].translate(currobj->x, currobj->y, currobj->z);
            }
            for (int n = 0; n < 4; n++)
            {
               Vector3 temp1 = tempprim.v[1] - tempprim.v[0];
               Vector3 temp2 = tempprim.v[2] - tempprim.v[0];
               tempprim.n[n] = temp1.cross(temp2);
               tempprim.n[n].normalize();
            }
            currobj->prims.push_back(tempprim);
            tempprim = WorldPrimitives();
         }
      }
      else if (currobj->type == "proctree")
      {
         int numleaves;  // Don't need to store this value
         string dummy;
         ProceduralTree t;
         gm >> currobj->texnum;
         gm >> currobj->texnum1;
         gm >> currobj->texnum2;
         currobj->size = 0; // Size is required
         t.ReadParams(gm);
         gm >> dummy >> currobj->impdist;
         gm >> dummy >> currobj->size;
         gm >> currobj->x;
         gm >> currobj->y;
         gm >> currobj->z;
         gm >> currobj->rotation;
         gm >> currobj->pitch;
         gm >> currobj->roll;
         currobj->dynobj = dynobjects.end();
         int save = t.GenTree(currobj);
         cout << "Tree primitives: " << save << endl;
      }
      else if (currobj->type == "bush")
      {
         int numleaves;  // Don't need to store this value
         gm >> currobj->texnum;
         gm >> tempprim.height;
         gm >> currobj->x;
         gm >> currobj->y;
         gm >> currobj->z;
         gm >> currobj->rotation;
         gm >> currobj->pitch;
         gm >> currobj->roll;
         gm >> numleaves;
         currobj->size = tempprim.height;
         /*prims[nextprim].type = "cylinder";
         prims[nextprim].object = i;
         prims[nextprim].texnum = objects[i].texnum;*/
         
         // Generate leaves
         float height = currobj->size;
         for (int j = 0; j < numleaves; j++)
         {
            tempprim.texnum = currobj->texnum;
            tempprim.object = currobj;
            tempprim.type = "tristrip";
            tempprim.transparent = false;
            tempprim.collide = false;
            float leafratio = .5;
            tempprim.v[0].x = height / leafratio;
            tempprim.v[0].y = 0;
            tempprim.v[0].z = height / leafratio;
            tempprim.v[1].x = height / leafratio;
            tempprim.v[1].y = 0;
            tempprim.v[1].z = -height / leafratio;
            tempprim.v[2].x = -height / leafratio;
            tempprim.v[2].y = 0;
            tempprim.v[2].z = height / leafratio;
            tempprim.v[3].x = -height / leafratio;
            tempprim.v[3].y = 0;
            tempprim.v[3].z = -height / leafratio;
            float amount = j * 360 / numleaves;
            for (int v = 0; v < 4; v++)
            {
               tempprim.v[v].rotate(amount * 2.5, amount * 3.3, amount);
               tempprim.v[v].translate(0, height / 2, 0);// / 3 * 2);
               tempprim.v[v].rotate(currobj->pitch, currobj->rotation, currobj->roll);
               tempprim.v[v].translate(currobj->x, currobj->y, currobj->z);
            }
            /* Right now we shut off lighting for tree leaves because
               it doesn't really look very good, so this step is not necessary
            for (int n = 0; n < 4; n++)
            {
               Vector3 temp1 = prims[nextprim].v[1] - prims[nextprim].v[0];
               Vector3 temp2 = prims[nextprim].v[2] - prims[nextprim].v[0];
               prims[nextprim].n[n] = temp1.cross(temp2);
               prims[nextprim].n[n].normalize();
            }*/
            currobj->prims.push_back(tempprim);
            tempprim = WorldPrimitives();
         }
      }
      else if (currobj->type == "tristrip")
      {
         gm >> currobj->texnum;
         gm >> currobj->x;
         gm >> currobj->y;
         gm >> currobj->z;
         gm >> tempprim.v[0].x;
         gm >> tempprim.v[0].y;
         gm >> tempprim.v[0].z;
         gm >> tempprim.v[1].x;
         gm >> tempprim.v[1].y;
         gm >> tempprim.v[1].z;
         gm >> tempprim.v[2].x;
         gm >> tempprim.v[2].y;
         gm >> tempprim.v[2].z;
         gm >> tempprim.v[3].x;
         gm >> tempprim.v[3].y;
         gm >> tempprim.v[3].z;
         gm >> currobj->rotation;
         gm >> currobj->pitch;
         gm >> currobj->roll;
         currobj->size = Max(tempprim.v[0].distance(tempprim.v[3]),
                             tempprim.v[1].distance(tempprim.v[2]));
         tempprim.type = "tristrip";
         tempprim.object = currobj;
         tempprim.texnum = currobj->texnum;
         for (int v = 0; v < 4; v++)
         {
            tempprim.v[v].rotate(currobj->pitch, currobj->rotation, currobj->roll);
            tempprim.v[v].translate(currobj->x, currobj->y, currobj->z);
         }
         for (int n = 0; n < 4; n++)
         {
            Vector3 temp1 = tempprim.v[1] - tempprim.v[0];
            Vector3 temp2 = tempprim.v[2] - tempprim.v[0];
            tempprim.n[n] = temp1.cross(temp2);
            tempprim.n[n].normalize();
         }
         currobj->prims.push_back(tempprim);
         tempprim = WorldPrimitives();
      }
   }
   
   // Build terrain objects
   typedef vector<list<WorldObjects>::iterator> terrvec;
   vector<terrvec> terrobjptrs;
   /*typedef vector<int> countvec;
   vector<countvec> nextprim;*/
   terrvec temp;
   tempobj = WorldObjects();
   tempobj.type = "terrain";
   tempobj.x = 0;
   tempobj.y = 0;
   tempobj.z = 0;
   tempobj.rotation = 0;
   tempobj.pitch = 0;
   tempobj.roll = 0;
   tempobj.size = tilesize * terrobjsize * sqrt(2);
   for (int y = 0; y < maph - 1; y += terrobjsize)
   {
      terrobjptrs.push_back(terrvec());
      //nextprim.push_back(countvec());
      for (int x = 0; x < mapw - 1; x += terrobjsize)
      {
         objects.push_front(tempobj);
         terrobjptrs.back().push_back(objects.begin());
         //nextprim.back().push_back(0);
      }
   }
   
   tempprim = WorldPrimitives();
   //objects.push_front(tempobj);
   
   for (int layer = 0; layer < nummaplayers; layer++)
   {
      for (int y = 0; y < maph - 1; y++)
      {
         for (int x = 0; x < mapw - 1; x++)
         {
            if (texarray[layer][y][x] != 0)
            {
               currobj = terrobjptrs[y / terrobjsize][x / terrobjsize];
               tempprim.type = "terrain";
               tempprim.object = currobj;
               tempprim.v[0].x = x * tilesize;
               tempprim.v[0].y = maparray[y][x] * heightscale;
               tempprim.v[0].z = y * tilesize;
               tempprim.v[1].x = x * tilesize;
               tempprim.v[1].y = maparray[y + 1][x] * heightscale;
               tempprim.v[1].z = (y + 1) * tilesize;
               tempprim.v[2].x = (x + 1) * tilesize;
               tempprim.v[2].y = maparray[y][x + 1] * heightscale;
               tempprim.v[2].z = y * tilesize;
               tempprim.v[3].x = (x + 1) * tilesize;
               tempprim.v[3].y = maparray[y + 1][x + 1] * heightscale;
               tempprim.v[3].z = (y + 1) * tilesize;
               tempprim.texnum = texarray[layer][y][x];
               Vector3 temp1 = tempprim.v[1] - tempprim.v[0];
               Vector3 temp2 = tempprim.v[2] - tempprim.v[0];
               normarray[y][x] = temp1.cross(temp2);
               normarray[y][x].normalize();
               for (int v = 0; v < 4; v++)
                  tempprim.v[v].translate(0, layergap * layer, 0);
               if (textrans[texarray[layer][y][x]])
               {
                  tempprim.transparent = true;
                  currobj->tprims.push_back(tempprim);
               }
               else currobj->prims.push_back(tempprim);
               tempprim = WorldPrimitives();
            }
         }
      }
   }
   
   // Calculate smoothed normals of vertices to reduce the sharp edges
   // Can't be done in the same loop as above because all of the normals
   // for the polys must be calculated first, but the outer loops have to
   // be identical anyway.  It is VERY IMPORTANT that primitives be
   // touched in exactly the same order as the above loop.
   int currprim = 0;
   for (int layer = 0; layer < nummaplayers; layer++)
   {
      for (int y = 0; y < maph - 1; y++)
      {
         for (int x = 0; x < mapw - 1; x++)
         {
            if (texarray[layer][y][x] != 0)
            {
               currobj = terrobjptrs[y / terrobjsize][x / terrobjsize];
               //currprim = nextprim[y / terrobjsize][x / terrobjsize];
               // Figure out which primitive of the object we are dealing with
               currprim = 0;
               if (textrans[texarray[layer][y][x]])
               {
                  while (!floatzero(currobj->tprims[currprim].n[0].distance2()))
                     ++currprim;
               }
               else
               {
                  while (!floatzero(currobj->prims[currprim].n[0].distance2()))
                     ++currprim;
               }
               int currnorm = 0;
               
               for (int currx = x; currx <= x + 1; currx++)
               {
                  for (int curry = y; curry <= y + 1; curry++)
                  {
                     Vector3 temp;
                     temp = normarray[y][x];
                     int numtiles = 1;
                     
                     if (curry >= 0 && currx >= 0 && curry < maph - 1 &&
                         currx < mapw - 1 && (currx != x || curry != y))
                     {
                        temp += normarray[curry][currx];
                        numtiles++;
                     }
                     if (curry >= 0 && currx - 1 >= 0 && curry < maph - 1 &&
                         (currx - 1 != x || curry != y))
                     {
                        temp += normarray[curry][currx - 1];
                        numtiles++;
                     } 
                     if (curry - 1 >= 0 && currx >= 0 && currx < mapw - 1 &&
                         (currx != x || curry - 1 != y))
                     {
                        temp += normarray[curry - 1][currx];
                        numtiles++;
                     }
                     if (curry - 1 >= 0 && currx - 1 >= 0 &&
                         (currx - 1 != x || curry - 1 != y))
                     {
                        temp += normarray[curry - 1][currx - 1];
                        numtiles++;
                     }
                     
                     if (!textrans[texarray[layer][y][x]])
                        currobj->prims[currprim].n[currnorm] = temp / numtiles;
                     else currobj->tprims[currprim].n[currnorm] = temp / numtiles;
                     currnorm++;
                  }
               }
               //nextprim[y / terrobjsize][x / terrobjsize]++;
            }
         }
      }
   }
   for (int y = 0; y < maph - 1; y += terrobjsize)
   {
      for (int x = 0; x < mapw - 1; x += terrobjsize)
      {
         currobj = terrobjptrs[y / terrobjsize][x / terrobjsize];
         currobj->x = (x / terrobjsize) * terrobjsize * tilesize + tilesize * (terrobjsize / 2.f);
         currobj->y = 0;
         currobj->z = (y / terrobjsize) * terrobjsize * tilesize + tilesize * (terrobjsize / 2.f);
      }
   }
   
   for (list<WorldObjects>::iterator i = objects.begin(); i != objects.end(); ++i)
   {
      if (i->impdist)
         i->GenFbo();
      i->GenVbo();
   }
   
   // Add objects to kd-tree
   Vector3 points[8];
   for (int i = 0; i < 4; ++i)
   {
      points[i] = worldbounds[0].v[i];// + Vector3(0, 10, 0);
   }
   for (int i = 0; i < 4; ++i)
   {
      points[i + 4] = worldbounds[5].v[i];
   }
   kdtree = ObjectKDTree(&objects);
   kdtree.setvertices(points);
   cout << "Refining KD-Tree..." << flush;
   kdtree.refine(0);
   cout << "Done\n" << flush;
   //exit(0);
   
   // Add primitives to an octree to speed up collision detection
   /*vector<GenericPrimitive> p;
   
   list<WorldObjects>::iterator i;
   vector<WorldPrimitives>::iterator j;
   for (i = objects.begin(); i != objects.end(); ++i)
   {
      for (j = i->prims.begin(); j != i->prims.end(); ++j)
      {
         p.push_back(*j);
      }
   }
   
   ot = new PrimitiveOctree(p);
   Vector3 points[8];
   for (int i = 0; i < 4; ++i)
   {
      points[i] = worldbounds[0].v[i] - Vector3(0, 10, 0);
   }
   for (int i = 0; i < 4; ++i)
   {
      points[i + 4] = worldbounds[5].v[i];
   }
   ot->setvertices(points);
   cout << "Refining octree..." << flush;
   ot->refine();
   cout << "Done\n";*/
}