#!/bin/bash

# This script is only for Linux builds.  Windows builds follow basically the same steps,
# but obviously the actual build part needs to be done on a Windows machine first.

# Copy libraries from the system folder to our local lib folder
# This way our lib folder always matches what gets compiled
LIBS="libGLEW libSDL- libSDL_image libSDL_net libSDL_ttf libalut libboost_filesystem libboost_system libfreetype libgcc_s libogg libopenal libstdc++ libvorbis libvorbisfile libxerces-c libz libcurl libnsl"
RELEASE=550
outfile=buildoutput


if [ $# != 1 ]
then
   echo "Warning: Will make full build.  This can take a while."
fi

rm $outfile

if [ ! -z `uname -m | grep x86_64` ]
then
   LIB=lib64
else
   LIB=lib
fi

echo "Building"
##git pull >> $outfile 2>&1
REVISION=`git log --pretty=oneline | wc -l`

if [ ! -d build ]; then
 mkdir build
fi
cd build

echo Running CMake...
cmake ..
if [ "$?" != "0" ]; then
 echo
 echo CMAKE FAILED. EXITING.
 exit $?
fi

CPUCOUNT=$(grep processor /proc/cpuinfo | wc -l)
echo Running Make with $CPUCOUNT processors ...
make clean >> $outfile 2>&1
make -j$CPUCOUNT >> $outfile 2>&1
if [ "$?" != "0" ]; then
 echo
 echo MAKE FAILED. EXITING.
 echo
 echo Shwoing last 40 lines of buildoutput...
 tail -n 40 buildoutput
 exit $?

fi
echo Make Complete.

cd ..
cp build/coldestaz . >> $outfile 2>&1
cp build/server . >> $outfile 2>&1

# This needs to happen after the build or the binary isn't going to be there/up to date.
echo "Copying libraries"
mkdir lib >> $outfile 2>&1
rm lib/* >> $outfile 2>&1
for i in $LIBS
do
   REALFILE=`ldd ./coldestaz | grep $i | sed -e 's/[ \t]*\(.*\) *=> *\(.*\) .*/\2/'`
   cp $REALFILE ./lib || echo "Failed to copy $REALFILE" >> $outfile 2>&1
   echo $REALFILE >> $outfile 2>&1
done

# This one is not in the ldd output because it is dynamically opened by libSDL_image, so we have to
# hardcode it.  I don't anticipate it changing much though so that should be okay.
cp /usr/$LIB/libpng.so.3 ./lib >> $outfile 2>&1
echo "/usr/$LIB/libpng.so.3" >> $outfile 2>&1

rm -rf ColdestAZ$REVISION >> $outfile 2>&1
echo $REVISION > version
echo "Kitting"
./kit.sh ColdestAZ$REVISION >> $outfile 2>&1
echo "Packaging"
./package.sh linux ColdestAZ$REVISION >> $outfile 2>&1

# Patches should no longer be necessary thanks to the updater
#echo "Building Patch"
#./buildpatch linux $RELEASE >> $outfile 2>&1

if [ "$1" == "upload" ]; then
   echo "Uploading"
   ./uploadbuild.sh linux $1 >> $outfile 2>&1
fi
